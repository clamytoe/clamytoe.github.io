<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ramblings</title><link href="https://clamytoe.github.io/" rel="alternate"></link><link href="https://clamytoe.github.io/feeds/all.atom.xml" rel="self"></link><id>https://clamytoe.github.io/</id><updated>2020-03-01T01:04:00-06:00</updated><subtitle>of an autodidact...</subtitle><entry><title>Finally getting the hang of working with Pelican!</title><link href="https://clamytoe.github.io/articles/2020/Feb/28/pelican" rel="alternate"></link><published>2020-02-28T09:50:00-06:00</published><updated>2020-03-01T00:42:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-28:/articles/2020/Feb/28/pelican</id><summary type="html">&lt;p&gt;Nothing beats learning something new than just jumping in and playing around with it!&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Finally getting the hang of working with Pelican&lt;/h1&gt;
&lt;p&gt;If you've seen my &lt;a href="https://github.com/clamytoe/clamytoe.github.io"&gt;source repo&lt;/a&gt; for this site, you know that I followed &lt;a href="https://opensource.com/users/jnyjny"&gt;Erik O'Shaughnessy's&lt;/a&gt; &lt;em&gt;Run your blog on GitHub Pages with Python&lt;/em&gt; &lt;a href="https://opensource.com/article/19/5/run-your-blog-github-pages-python"&gt;tutorial&lt;/a&gt;.
It's a great tutorial, I specifically love his &lt;strong&gt;one weird trick&lt;/strong&gt;, but it leaves so many unanswered questions.
Go read it now if you haven't and we'll pick up where he leaves off.&lt;/p&gt;
&lt;p&gt;Luckily he does provide the link to the official &lt;a href="https://docs.getpelican.com/"&gt;documentation&lt;/a&gt;.
It was through that link that I found Pelican's tutorials &lt;a href="https://github.com/getpelican/pelican/wiki/Tutorials"&gt;repo&lt;/a&gt;.
Specifically &lt;a href="https://www.fullstackpython.com/about-author.html"&gt;Matt Makai's&lt;/a&gt; introductory &lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;tutorial&lt;/a&gt;.
I'll admit, that I only skimmed over it, it's kind of long.
I was looking for anything that would jump out at me.
What caught my eye was how simple it all was to automate things with &lt;code&gt;make&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;I took a quick look at mine and saw what commands were defined.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;/span&gt;
&lt;span class="code-line"&gt;Makefile &lt;span class="k"&gt;for&lt;/span&gt; a pelican Web site&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Usage:&lt;/span&gt;
&lt;span class="code-line"&gt;   make html                           &lt;span class="o"&gt;(&lt;/span&gt;re&lt;span class="o"&gt;)&lt;/span&gt;generate the web site&lt;/span&gt;
&lt;span class="code-line"&gt;   make clean                          remove the generated files&lt;/span&gt;
&lt;span class="code-line"&gt;   make regenerate                     regenerate files upon modification&lt;/span&gt;
&lt;span class="code-line"&gt;   make publish                        generate using production settings&lt;/span&gt;
&lt;span class="code-line"&gt;   make serve &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;              serve site at http://localhost:8000&lt;/span&gt;
&lt;span class="code-line"&gt;   make serve-global &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0&lt;span class="o"&gt;]&lt;/span&gt;  serve &lt;span class="o"&gt;(&lt;/span&gt;as root&lt;span class="o"&gt;)&lt;/span&gt; to :80&lt;/span&gt;
&lt;span class="code-line"&gt;   make devserver &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;          serve and regenerate together&lt;/span&gt;
&lt;span class="code-line"&gt;   make ssh_upload                     upload the web site via SSH&lt;/span&gt;
&lt;span class="code-line"&gt;   make rsync_upload                   upload the web site via rsync+ssh  &lt;/span&gt;
&lt;span class="code-line"&gt;   make github                         upload the web site via gh-pages&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;Set the DEBUG variable to &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="nb"&gt;enable&lt;/span&gt; debugging, e.g. make &lt;span class="nv"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; html&lt;/span&gt;
&lt;span class="code-line"&gt;Set the RELATIVE variable to &lt;span class="m"&gt;1&lt;/span&gt; to &lt;span class="nb"&gt;enable&lt;/span&gt; relative urls&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at the &lt;code&gt;Makefile&lt;/code&gt; source is where I noticed that for local development, it just uses the &lt;code&gt;pelicanconf.py&lt;/code&gt; script, but for publishing it uses &lt;code&gt;publishconf.py&lt;/code&gt;.
Looking at &lt;code&gt;publishconf.py&lt;/code&gt; I saw that it actually imports &lt;code&gt;pelicanconf.py&lt;/code&gt; and then overrides some of the variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AHA!&lt;/strong&gt; This is were I had a eurika moment!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had noticed a problem with my site.
Whenever I clicked on the header link, instead of taking me back to the home page it would just reload whatever page I was on.
I was able to get around that by just specifying the &lt;code&gt;SITE_URL&lt;/code&gt; variable in &lt;code&gt;pelicanconf.py&lt;/code&gt;.
Unfortunately, that broke testing the blog locally because all the links would point to the live site on GitHub!&lt;/p&gt;
&lt;p&gt;What I'm trying to say here is that in I was able to resolve both of these issues by making the following changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pelicanconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;publishconf.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://clamytoe.github.io&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another issue that I was having was that I couldn't figure out how to get my &lt;code&gt;favicon.ico&lt;/code&gt; to be treated as a static file and automatically dumped into the &lt;code&gt;output&lt;/code&gt; directory.
My solution had been to write a little bash script to copy it over for me, but that was kind of tedious.
But now that I was going to use the &lt;code&gt;Makefile&lt;/code&gt; I decided to automate it in there!&lt;/p&gt;
&lt;p&gt;I added the following lines to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FAVICON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/static/favicon.ico&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then after the &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;regenerate&lt;/code&gt;, and &lt;code&gt;publish&lt;/code&gt; commands, I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;FAVICON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: I had initially added that to all of the commands, but the ones that run the server, don't actually get to that step.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I &lt;em&gt;Ctrl+C&lt;/em&gt; out of it, it just exists...&lt;/p&gt;
&lt;h2&gt;New workflow&lt;/h2&gt;
&lt;p&gt;With that all set, things are now much easier and make more sense.
What I would recommend, is to run the &lt;code&gt;make clean&lt;/code&gt; command and commit it to your &lt;code&gt;content&lt;/code&gt; branch.
Now you will have a &lt;em&gt;clean&lt;/em&gt; slate to start with.&lt;/p&gt;
&lt;p&gt;You can now add any new content and do the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .&lt;/span&gt;
&lt;span class="code-line"&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Your description...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git push origin content&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: Of course, only push your files when you're ready to, but you get the idea.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you're ready to generate the actual site, here's how that's now done.&lt;/p&gt;
&lt;h3&gt;Generate the site&lt;/h3&gt;
&lt;p&gt;If you just want to generate the site this is the command that you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make html&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can either run the Pelican server or the Python one.&lt;/p&gt;
&lt;h4&gt;Pelican server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican --listen&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Python server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output&lt;/span&gt;
&lt;span class="code-line"&gt;python -m http.server&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both of those will make the site accessible at &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Generate site and preview&lt;/h3&gt;
&lt;p&gt;Now, if you know that you will be wanting to preview your site, a much better way is to use this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not only will this generate the site, but will also start the Pelican server automagically for you!
This option comes in handy when you are tweaking your site's theme.
I wanted to change the colors on mine and doing it like this automatically detected the changes and served them up.&lt;/p&gt;
&lt;h3&gt;Publish the site&lt;/h3&gt;
&lt;p&gt;This command generates the site using the &lt;code&gt;publishconf.py&lt;/code&gt; script, so if you specified your site's url in there, it will add it to the generated html pages.
It's nice for making sure all is working correctly and enabling your Google Analytics; if you're into that sort of thing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make publish&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Publish and push to github&lt;/h3&gt;
&lt;p&gt;Now, we're cooking with Crisco!
This command will generate the final site using &lt;code&gt;publishconf.py&lt;/code&gt;, merge the output into your &lt;code&gt;master&lt;/code&gt; branch, and push it up the hubs; all in one step!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make github&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cleaning up&lt;/h3&gt;
&lt;p&gt;Now that you've pushed to the hubs, removed the generated files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make clean&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run &lt;code&gt;git status&lt;/code&gt;, you should see that there are no changes and that you are ready to add more content.
Nice!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a great learning experience for me.
Not only did I update the color scheme of my site, I also fixed some annoying issues that I was having.
Now I don't have to look up any &lt;code&gt;ghp-import ...&lt;/code&gt; command and things just got a heck of a lot more pleasant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch content/posts/new-blog-post.md&lt;/span&gt;
&lt;span class="code-line"&gt;vi &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# write the blog content&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git status&lt;/span&gt;
&lt;span class="code-line"&gt;git add .&lt;/span&gt;
&lt;span class="code-line"&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;New blog post.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;git push origin content&lt;/span&gt;
&lt;span class="code-line"&gt;make github&lt;/span&gt;
&lt;span class="code-line"&gt;make clean&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;On a side note&lt;/h3&gt;
&lt;p&gt;I was also having a weird problem with my search feature.
I had to remove the machine code from my &lt;a href="https://clamytoe.github.io/category/cryptography.html"&gt;cryptography&lt;/a&gt; blog post because it was completely screwing up the JavaScript.
Once I got that working, I then noticed that whenever I tried to do a search from any of the category pages, that it was looking for &lt;code&gt;/category/search.html&lt;/code&gt;.
That page doesn't exists, so I was baffled as to why that was going on.
I took a look at the &lt;a href="https://github.com/lucachr/pelican-mg"&gt;pelican-mg&lt;/a&gt; theme's &lt;a href="https://palletsprojects.com/p/jinja/"&gt;Jinja&lt;/a&gt; templates and found the issue in &lt;code&gt;base.html&lt;/code&gt;.
I simply had to add &lt;code&gt;{{ SITEURL }}&lt;/code&gt; in the &lt;code&gt;action&lt;/code&gt; part of the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uk-search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/search.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-uk-search&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it works beautifully!&lt;/p&gt;
&lt;p&gt;Of course, with me being an upstanding netcitizen, I submitted a &lt;a href="https://github.com/lucachr/pelican-mg/pull/11"&gt;pull request&lt;/a&gt; to fix the issue :).&lt;/p&gt;</content><category term="Blog"></category><category term="pelican"></category><category term="Makefile"></category><category term="make"></category></entry><entry><title>Pytest fixtures with tear down</title><link href="https://clamytoe.github.io/articles/2020/Feb/19/pytest-fixtures" rel="alternate"></link><published>2020-02-19T17:40:00-06:00</published><updated>2020-03-01T00:57:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-19:/articles/2020/Feb/19/pytest-fixtures</id><summary type="html">&lt;p&gt;Figured out how to tear down a pytest fixture&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Pytest fixtures with tear down code&lt;/h1&gt;
&lt;p&gt;Today after listening to &lt;a href="https://twitter.com/brianokken"&gt;Brian Okken's&lt;/a&gt; &lt;a href="https://testandcode.com/"&gt;Test &amp;amp; Code&lt;/a&gt; podcast with &lt;a href="https://twitter.com/anthonypjshaw"&gt;Anthony Shaw&lt;/a&gt;, I was reminded that I wanted to install Anthon's &lt;a href="https://github.com/tonybaloney/pycharm-security"&gt;Python Security Plugin&lt;/a&gt; for &lt;a href="https://www.jetbrains.com/pycharm/"&gt;JetBrain's PyCharm&lt;/a&gt; IDE.
That was a breeze to install and it just worked out of the box.
I fired it up and it automatically checked my code and called it good.&lt;/p&gt;
&lt;p&gt;I then started to write some tests and while checking a password, it alerted me to an issue.
It made a suggestion to fix it, so I accepted and it updated my code and even added the proper import statement!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FROM&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;TO&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;secrets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;compare_digest&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;passlock.entry&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;router&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.2.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;router&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.2.1&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;compare_digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although, this is just a dummy password for testing, it doesn't hurt to build up some good habits!&lt;/p&gt;
&lt;h2&gt;On to the fixture tear down&lt;/h2&gt;
&lt;p&gt;This is when I got to the part where I had to test the creation of my private and public keys.
Since I was creating them for testing and didn't want them around afterwards, I decided that I needed to make them go away after the tests were done.&lt;/p&gt;
&lt;p&gt;I was already using fixtures so that I didn't have to recreate the instances of my classes for each test; generating the keys take a bit of time!
I went crazy an opted to make them future proof with &lt;strong&gt;4096-bits&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;The challenge was figuring out how to tear them down.
I did some initial searches and was coming up blank.
I then looked up the pytest guru, &lt;a href="https://pythontesting.net/framework/pytest/pytest-fixtures-easy-example/"&gt;Brian's&lt;/a&gt; blog about the topic, but his examples were too simplistic for what I was trying to do.
All they demonstrated was how to print a message, it didn't actually show how to return anything, and then have it torn down afterwards.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Brian's example&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resource_a_setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;resources_a_setup()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resource_a_teardown&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;resources_a_teardown()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_a_teardown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1_that_needs_resource_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_a_setup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_1_that_needs_resource_a()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_2_that_does_not&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;test_2_that_does_not()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_3_that_does&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_a_setup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;test_3_that_does()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ended up reading the actual &lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;pytest documentation&lt;/a&gt;; who would have thunk?!
I'll do you guys a solid and cut out the noise and show you what I did:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_locker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.toe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tlock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_vault_custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom_locker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;custom_locker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.toe&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;custom_locker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tlock&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setting the &lt;code&gt;scope&lt;/code&gt; of the fixture to &lt;em&gt;module&lt;/em&gt; makes it so that it doesn't actually do the tearing down until after all of the tests are completed.
&lt;em&gt;Perfect!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The variables in the &lt;code&gt;Vault&lt;/code&gt; instance are Path objects, so it was simple enough to just &lt;code&gt;unlink()&lt;/code&gt; the files and then &lt;code&gt;rmdir()&lt;/code&gt; the directory after it's been emptied.
Of course, I tried removing the directory first, but it wasn't having any of that until it was empty...&lt;/p&gt;</content><category term="Python"></category><category term="pytest"></category><category term="fixtures"></category><category term="tear-down"></category></entry><entry><title>Venture Into Cryptography with PyCryptodome!</title><link href="https://clamytoe.github.io/articles/2020/Feb/14/pycryptodome" rel="alternate"></link><published>2020-02-14T07:00:00-06:00</published><updated>2020-03-01T00:44:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-14:/articles/2020/Feb/14/pycryptodome</id><summary type="html">&lt;p&gt;learning about how to encrypt files&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Into the cryptography rabbit hole!&lt;/h1&gt;
&lt;p&gt;As dumb as it is, I have an unsecured text file that I use to keep track of all my username and passwords for all of the sites that I frequent. In order to not be so "hackable", I've decided to encrypt the file.&lt;/p&gt;
&lt;p&gt;I had recently written a couple of coding challenges for &lt;a href="https://codechalleng.es/"&gt;Pybites Code Challenges&lt;/a&gt; site, using the &lt;a href="https://cryptography.io/en/latest/"&gt;cryptography&lt;/a&gt; module.
One was a coding challenge and the other a testing one.
Unfortunately, that module is &lt;strong&gt;NOT&lt;/strong&gt; part of Python's Standard Library!&lt;/p&gt;
&lt;p&gt;I didn't specifically install it, but it seems to come pre-installed with &lt;a href="https://www.anaconda.com/distribution/"&gt;Anaconda&lt;/a&gt;, which I use.
I was looking through all of the modules that I had, when I came across the cryptography one.
That's when I first got the idea for the challenges.
It started as a single challenge, but I really liked how the tests came out and decided to split it up into coding and testing bites.&lt;/p&gt;
&lt;p&gt;I pushed them to the Pybites Github private repo and it sat there for a bit before &lt;a href="https://codechalleng.es/profiles/pybob"&gt;Bob Belderbos&lt;/a&gt; decided to add them.
That's when the problems started!
He discovered that the module was not available so he installed it.
It worked perfectly for the coding challenge, but for the testing one, when the call to the &lt;a href="https://docs.pytest.org/en/latest/"&gt;Pytest&lt;/a&gt;/&lt;a href="https://github.com/mutpy/mutpy"&gt;Mutpy&lt;/a&gt; instance is made, it loosed the path to the module!&lt;/p&gt;
&lt;p&gt;We were discussing the issue on the &lt;a href="https://pybit.es/pages/community.html"&gt;Pybites&lt;/a&gt; Slack channel when &lt;a href="https://codechalleng.es/profiles/driscollis"&gt;Mike Driscoll&lt;/a&gt; the creator of &lt;a href="http://www.blog.pythonlibrary.org/"&gt;The Mouse vs Python&lt;/a&gt;, mentioned the &lt;a href="https://www.pycryptodome.org/en/latest/"&gt;PyCryptodome&lt;/a&gt; module.
He initially thought that the problem was with installing the cryptography module.
In the end, Bob was not able to figure out how to get it to work, so the challenge had to be removed from the platform.&lt;/p&gt;
&lt;p&gt;Regardless, I was intrigued by pycryptodome, so I started to look into how it worked.
It seemed pretty cool, so that's when I came up with the idea of encrypting my password file.
It took a little bit of work, but I was able to encrypt the file into a binary.
The problem came when I started to try and retrieve the data.
The module complained about the data being too large!&lt;/p&gt;
&lt;p&gt;I decided to create an encrypted binary for each entry.
So far that's worked, but now I have to figure out how to scan the directory and list the ones that are available in order to be able to retrieve/update them.
I've been using the logging module as well, so now I have to figure out how to do some log rotation to keep from taking up too much drive space.
I might even play around with creating a UI for it, to make it easier to use.&lt;/p&gt;
&lt;p&gt;Since I used my &lt;a href="https://github.com/clamytoe/toepack"&gt;toepack&lt;/a&gt; &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;Cookiecutter&lt;/a&gt; template, it's a package.
It's gotten big enough that I've moved the two classes, (&lt;code&gt;Entry&lt;/code&gt;, &lt;code&gt;Vault&lt;/code&gt;) into their own files.
It works out pretty good because the &lt;code&gt;app.py&lt;/code&gt; file now only contains:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.entry&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.vault&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logger&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Entering main.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://192.168.2.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Running as a module.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Separating the code like this will come in handy when it comes to either creating a &lt;a href="https://palletsprojects.com/p/click/"&gt;Click&lt;/a&gt; CLI interface or a GUI one.&lt;/p&gt;
&lt;p&gt;The log file for that run looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,812 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Creating vault: /home/mohh/Documents/.passlock/ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,812 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Importing public key: plock.pub&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,812 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Public key accessed: /home/mohh/.passlock/plock.pub&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,815 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating random byte &lt;span class="k"&gt;for&lt;/span&gt; session key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,815 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating encrypted session key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,819 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating AES cipher&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,820 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Encrypting data to create cipher text&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,820 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Writing cipher text to: ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,820 - &lt;span class="o"&gt;[&lt;/span&gt;WARNING&lt;span class="o"&gt;]&lt;/span&gt; - root - /home/mohh/Documents/.passlock/ip.bin already exists!&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,820 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Successfully wrote to: /home/mohh/Documents/.passlock/ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,821 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Opening file &lt;span class="k"&gt;for&lt;/span&gt; reading: /home/mohh/Documents/.passlock/ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,821 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Importing private key: plock&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:17,821 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Private key accessed: /home/mohh/.passlock/plock&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,150 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Extracting encrypted session key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,151 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating RSA cipher key from imported private key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,151 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Decrypting extracted session key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,171 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Session key was successfully restored&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,171 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating AES cipher from session key&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,172 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Decrypting and verifying cipher text&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,172 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Closing: ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,172 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Generating new Entry object from decrypted data&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="m"&gt;2020&lt;/span&gt;-02-13 &lt;span class="m"&gt;14&lt;/span&gt;:05:18,172 - &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; - root - Returning decrypted text &lt;span class="k"&gt;for&lt;/span&gt;: ip&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not sure if that's too much information but logging each step in the process really comes in handy when trying to figure out issues at work.
I've tried to keep all sensitive data out of it unless the logging is switched to &lt;code&gt;debug&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Retrieving the encrypted data looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Successfully created: /home/mohh/Documents/.passlock/ip.bin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;[&lt;/span&gt;ip&lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;INFO: http://192.168.2.1&lt;/span&gt;
&lt;span class="code-line"&gt;USER: admin&lt;/span&gt;
&lt;span class="code-line"&gt;PASS: admin&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: These are not real username and passwords!&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Python"></category><category term="cryptography"></category><category term="pycryptodome"></category></entry><entry><title>Rescaling Values</title><link href="https://clamytoe.github.io/articles/2020/Feb/13/rescaling-values" rel="alternate"></link><published>2020-02-13T08:00:00-06:00</published><updated>2020-03-01T01:02:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-13:/articles/2020/Feb/13/rescaling-values</id><summary type="html">&lt;p&gt;Quick discussion about rescaling values for data science&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Scaling Values&lt;/h1&gt;
&lt;p&gt;Today while reading Data Science Algorithms in a Week, from packt, I came across the concept of rescaling values so that when measuring their distances they would be more relevant.
The dataset consisted of "House Ownership":&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Age&lt;/th&gt;
&lt;th align="left"&gt;Annual income in USD&lt;/th&gt;
&lt;th align="left"&gt;House ownership status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;23&lt;/td&gt;
&lt;td align="left"&gt;50,000&lt;/td&gt;
&lt;td align="left"&gt;Non-owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;37&lt;/td&gt;
&lt;td align="left"&gt;34,000&lt;/td&gt;
&lt;td align="left"&gt;Non-owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;20&lt;/td&gt;
&lt;td align="left"&gt;100,000&lt;/td&gt;
&lt;td align="left"&gt;Owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35&lt;/td&gt;
&lt;td align="left"&gt;130,000&lt;/td&gt;
&lt;td align="left"&gt;Owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;etc&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The aim being to predict whether a person that is 50 years old with an income of $80,000, would own a home so that he could be targeted for home insurance.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm"&gt;k-Nearest Neighbor&lt;/a&gt;'s are currently being covered and for this exercise a &lt;code&gt;k = 1&lt;/code&gt; is to be used.
Using either a &lt;a href="https://en.wikipedia.org/wiki/Euclidean_distance"&gt;Euclidean&lt;/a&gt; or &lt;a href="https://en.wiktionary.org/wiki/Manhattan_distance"&gt;Manhattan&lt;/a&gt; distance wouldn't matter because the distances between these values are too great. In comes rescaling!&lt;/p&gt;
&lt;p&gt;The formula use is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ScaledQuantity = (ActualQnatity-MinQuantity)/(MaxQuantity-MinQuantity)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So for this dataset, both the &lt;strong&gt;Age&lt;/strong&gt; and the &lt;strong&gt;Annual income&lt;/strong&gt; wound have to be adjusted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ScaledAge = (ActualAge-MinAge)/(MaxAge-MinAge)&lt;/strong&gt;
&lt;strong&gt;ScaledIncome = (ActualIncome-MinIncome)/(MaxIncome-MinIncome)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After scaling, the adjusted dataset would look something like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Age&lt;/th&gt;
&lt;th align="left"&gt;Scaled age&lt;/th&gt;
&lt;th align="left"&gt;Annual income in USD&lt;/th&gt;
&lt;th align="left"&gt;Scaled annual income&lt;/th&gt;
&lt;th align="left"&gt;House ownership status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;23&lt;/td&gt;
&lt;td align="left"&gt;09375&lt;/td&gt;
&lt;td align="left"&gt;50,000&lt;/td&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;Non-owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;37&lt;/td&gt;
&lt;td align="left"&gt;53125&lt;/td&gt;
&lt;td align="left"&gt;34,000&lt;/td&gt;
&lt;td align="left"&gt;04&lt;/td&gt;
&lt;td align="left"&gt;Non-owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;20&lt;/td&gt;
&lt;td align="left"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;100,000&lt;/td&gt;
&lt;td align="left"&gt;7&lt;/td&gt;
&lt;td align="left"&gt;Owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;35&lt;/td&gt;
&lt;td align="left"&gt;46875&lt;/td&gt;
&lt;td align="left"&gt;130,000&lt;/td&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;Owner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;50&lt;/td&gt;
&lt;td align="left"&gt;9375&lt;/td&gt;
&lt;td align="left"&gt;80,000&lt;/td&gt;
&lt;td align="left"&gt;5&lt;/td&gt;
&lt;td align="left"&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now a 1-NN algorithm with a Euclidean metric could easily be used to find out if the last person is more than likely to own a home.
Without the rescaling, the algorithm would have yielded different results.&lt;/p&gt;
&lt;p&gt;Keeping it short today, but hopefully it was a helpful tip!&lt;/p&gt;</content><category term="DataScience"></category><category term="datascience"></category><category term="rescaling"></category><category term="knn"></category><category term="euclidean"></category><category term="manhattan"></category></entry><entry><title>Initial Post for my Ramblings of an autodiadact Blog</title><link href="https://clamytoe.github.io/articles/2020/Feb/12/initial-post" rel="alternate"></link><published>2020-02-12T12:00:00-06:00</published><updated>2020-03-01T01:04:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-12:/articles/2020/Feb/12/initial-post</id><summary type="html">&lt;p&gt;initial post&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting my feet wet with this blogging stuff&lt;/h1&gt;
&lt;p&gt;This is my first post here.&lt;/p&gt;
&lt;p&gt;It's not much to look at, but my goal
is to show what I'm learning as I go.
There's no real "topic" but it will mostly be about what I'm working on and what I have to learn to get it done.
Hope that it's of interest to someone...&lt;/p&gt;</content><category term="Blog"></category><category term="initial"></category><category term="post"></category><category term="blog"></category></entry></feed>
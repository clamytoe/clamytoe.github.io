<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ramblings of an autodidact... - Pelican</title><link href="https://clamytoe.github.io/" rel="alternate"></link><link href="https://clamytoe.github.io/feeds/pelican.atom.xml" rel="self"></link><id>https://clamytoe.github.io/</id><updated>2020-02-28T09:50:00-06:00</updated><subtitle>Random programming stuff</subtitle><entry><title>Finally getting the hang of working with Pelican!</title><link href="https://clamytoe.github.io/pelican.html" rel="alternate"></link><published>2020-02-28T09:50:00-06:00</published><updated>2020-02-28T09:50:00-06:00</updated><author><name>Martin Uribe</name></author><id>tag:clamytoe.github.io,2020-02-28:/pelican.html</id><summary type="html">&lt;p&gt;Nothing beats learning something new than just jumping in and playing around with it!&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Finally getting the hang of working with Pelican!&lt;/h1&gt;
&lt;p&gt;If you've seen my &lt;a href="https://github.com/clamytoe/clamytoe.github.io"&gt;source repo&lt;/a&gt; for this site, you know that I followed &lt;a href="https://opensource.com/users/jnyjny"&gt;Erik O'Shaughnessy's&lt;/a&gt; &lt;em&gt;Run your blog on GitHub Pages with Python&lt;/em&gt; &lt;a href="(https://opensource.com/article/19/5/run-your-blog-github-pages-python)"&gt;tutorial&lt;/a&gt;.
It's a great tutorial, I specifically love his &lt;strong&gt;one weird trick&lt;/strong&gt;, but it leaves so many unanswered questions.
Go read it now if you haven't and we'll pick up where he leaves off.&lt;/p&gt;
&lt;p&gt;Luckily he does provide the link to the official &lt;a href="https://docs.getpelican.com/"&gt;documentation&lt;/a&gt;.
It was through that link that I found Pelican's tutorials &lt;a href="https://github.com/getpelican/pelican/wiki/Tutorials"&gt;repo&lt;/a&gt;.
Specifically &lt;a href="https://www.fullstackpython.com/about-author.html"&gt;Matt Makai's&lt;/a&gt; introductory &lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;tutorial&lt;/a&gt;.
I'll admit, that I only skimmed over it, it's kind of long.
I was looking for anything that would jump out at me.
What caught my eye was how simple it all was to automate things with &lt;code&gt;make&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;I took a quick look at mine and saw what commands were defined.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;make&lt;/span&gt;
&lt;span class="n"&gt;Makefile&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;Web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;                                           

&lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                                                                    
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;                           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;          
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;                          &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;         
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt;                     &lt;span class="n"&gt;regenerate&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;upon&lt;/span&gt; &lt;span class="n"&gt;modification&lt;/span&gt; 
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;                        &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;production&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; 
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;              &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="k"&gt;at&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;    
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;devserver&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;          &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt; &lt;span class="n"&gt;together&lt;/span&gt;      
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;ssh_upload&lt;/span&gt;                     &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;SSH&lt;/span&gt;        
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;rsync_upload&lt;/span&gt;                   &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;rsync&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;  
   &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;                         &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;   

&lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="n"&gt;debugging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;   
&lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;RELATIVE&lt;/span&gt; &lt;span class="k"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="k"&gt;relative&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at the &lt;code&gt;Makefile&lt;/code&gt; source is where I noticed that for local development, it just uses the &lt;code&gt;pelicanconf.py&lt;/code&gt; script, but for publishing it uses &lt;code&gt;publishconf.py&lt;/code&gt;.
Looking at &lt;code&gt;publishconf.py&lt;/code&gt; I saw that it actually imports &lt;code&gt;pelicanconf.py&lt;/code&gt; and then overrides some of the variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AHA!&lt;/strong&gt; This is were I had a eurika moment!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had noticed a problem with my site.
Whenever I clicked on the header link, instead of taking me back to the home page it would just reload whatever page I was on.
I was able to get around that by just specifying the &lt;code&gt;SITE_URL&lt;/code&gt; variable in &lt;code&gt;pelicanconf.py&lt;/code&gt;.
Unfortunately, that broke testing the blog locally because all the links would point to the live site on GitHub!&lt;/p&gt;
&lt;p&gt;What I'm trying to say here is that in I was able to resolve both of these issues by making the following changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;publishconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://clamytoe.github.io&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another issue that I was having was that I couldn't figure out how to get my &lt;code&gt;favicon.ico&lt;/code&gt; to be treated as a static file and automatically dumped into the &lt;code&gt;output&lt;/code&gt; directory.
My solution had been to write a little bash script to copy it over for me, but that was kind of tedious.
But now that I was going to use the &lt;code&gt;Makefile&lt;/code&gt; I decided to automate it in there!&lt;/p&gt;
&lt;p&gt;I added the following lines to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FAVICON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/static/favicon.ico
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then after the &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;regenerate&lt;/code&gt;, and &lt;code&gt;publish&lt;/code&gt; commands, I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;cp&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;FAVICON&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: I had initially added that to all of the commands, but the ones that run the server, don't actually get to that step.
When I &lt;em&gt;Ctrl+C&lt;/em&gt; out of it, it just exists...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;New workflow&lt;/h2&gt;
&lt;p&gt;With that all set, things are now much easier and make more sense.
What I would recommend, is to run the &lt;code&gt;make clean&lt;/code&gt; command and commit it to your &lt;code&gt;content&lt;/code&gt; branch.
Now you will have a &lt;em&gt;clean&lt;/em&gt; slate to start with.&lt;/p&gt;
&lt;p&gt;You can now add any new content and do the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;Your description...&amp;quot;&lt;/span&gt;
git push origin content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: Of course, only push your files when you're ready to, but you get the idea.
Now you're ready to generate the actual site, here's how that's now done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Generate the site&lt;/h3&gt;
&lt;p&gt;If you just want to generate the site this is the command that you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can either run the Pelican server or the Python one.&lt;/p&gt;
&lt;h4&gt;Pelican server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican --listen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Python server&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; output
python -m http.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both of those will make the site accessible at &lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Generate site and preview&lt;/h3&gt;
&lt;p&gt;Now, if you know that you will be wanting to preview your site, a much better way is to use this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not only will this generate the site, but will also start the Pelican server automagically for you!
This option comes in handy when you are tweaking your site's theme.
I wanted to change the colors on mine and doing it like this automatically detected the changes and served them up.&lt;/p&gt;
&lt;h3&gt;Publish the site&lt;/h3&gt;
&lt;p&gt;This command generates the site using the &lt;code&gt;publishconf.py&lt;/code&gt; script, so if you specified your site's url in there, it will add it to the generated html pages.
It's nice for making sure all is working correctly and enabling your Google Analytics; if you're into that sort of thing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Publish and push to github&lt;/h3&gt;
&lt;p&gt;Now, we're cooking with Crisco!
This command will generate the final site using &lt;code&gt;publishconf.py&lt;/code&gt;, merge the output into your &lt;code&gt;master&lt;/code&gt; branch, and push it up the hubs; all in one step!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make github
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cleaning up&lt;/h3&gt;
&lt;p&gt;Now that you've pushed to the hubs, removed the generated files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run &lt;code&gt;git status&lt;/code&gt;, you should see that there are no changes and that you are ready to add more content.
Nice!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a great learning experience for me.
Not only did I update the color scheme of my site, I also fixed some annoying issues that I was having.
Now I don't have to look up any &lt;code&gt;ghp-import ...&lt;/code&gt; command and things just got a heck of a lot more pleasant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch content/posts/new-blog-post.md
vi &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;span class="c1"&gt;# write the blog content&lt;/span&gt;
git status
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;New blog post.&amp;quot;&lt;/span&gt;
git push origin content
make github
make clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;On a side note...&lt;/h3&gt;
&lt;p&gt;I was also having a weird problem with my search feature.
I had to remove the machine code from my &lt;a href="https://clamytoe.github.io/category/cryptography.html"&gt;cryptography&lt;/a&gt; blog post because it was completely screwing up the JavaScript.
Once I got that working, I then noticed that whenever I tried to do a search from any of the category pages, that it was looking for &lt;code&gt;/category/search.html&lt;/code&gt;.
That page doesn't exists, so I was baffled as to why that was going on.
I took a look at the &lt;a href="https://github.com/lucachr/pelican-mg"&gt;pelican-mg&lt;/a&gt; theme's &lt;a href="https://palletsprojects.com/p/jinja/"&gt;Jinja&lt;/a&gt; templates and found the issue in &lt;code&gt;base.html&lt;/code&gt;.
I simply had to add &lt;code&gt;{{ SITEURL }}&lt;/code&gt; in the &lt;code&gt;action&lt;/code&gt; part of the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uk-search&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/search.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-uk-search&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it works beautifully!&lt;/p&gt;
&lt;p&gt;Of course, with me being an upstanding netcitizen, I submitted a &lt;a href="https://github.com/lucachr/pelican-mg/pull/11"&gt;pull request&lt;/a&gt; to fix the issue :).&lt;/p&gt;</content><category term="Pelican"></category></entry></feed>